#################################################
# DO Community Playbooks: Docker
#################################################
---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml

  tasks:
    # - name: Install aptitude using apt
    #   apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    # - name: Install required system packages
    #   apt: name={{ item }} state=latest update_cache=yes
    #   loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']

    # - name: Add Docker GPG apt Key
    #   apt_key:
    #     url: https://download.docker.com/linux/ubuntu/gpg
    #     state: present

    # - name: Add Docker Repository
    #   apt_repository:
    #     repo: deb https://download.docker.com/linux/ubuntu bionic stable
    #     state: present

    # - name: Update apt and install docker-ce
    #   apt: name={{ item }} state=latest update_cache=yes
    #   loop: [ 'docker-ce', 'docker-ce-cli', 'containerd.io']

    # - name: Install Docker Module for Python
    #   pip:
    #     name: docker

    - name: Pull default Docker image
      docker_image:
        name: "{{ default_container_image }}"
        source: pull

    # Creates the number of containers defined by the variable create_containers, using values from vars file
    - name: Create default containers
      docker_container:
        name: 'minecraft'
        image: "{{ default_container_image }}"
        state: 'started'
        published_ports: 
        - 19132:19132/udp
        volumes:
          - /home/server/bedrock-server/resource_packs:/bedrock-server/resource_packs
          - /home/server/bedrock-server/behavior_packs:/bedrock-server/behavior_packs
          - /home/server/bedrock-server/worlds:/bedrock-server/worlds
          - /home/server/bedrock-server/config:/bedrock-server/config
          - /home/server:/backup


    # - name: Run database container
    #   docker_container:
    #     name: 'database'
    #     image: 'docker.io/centos/postgresql-96-centos7'
    #     state: 'started'
    #     env:
    #       POSTGRESQL_USER: 'user'
    #       POSTGRESQL_PASSWORD: 'password'
    #       POSTGRESQL_DATABASE: 'my_db'
    #   register: db_cont_metadata
  #   - name: Wait for postgres to accept connections
  #     wait_for:
  #       host: '{{ db_cont_metadata["ansible_facts"]["docker_container"]["NetworkSettings"]["IPAddress"] }}'
  #       port: 5432
  #       state: drained
  #       connect_timeout: 1
  #       timeout: 30
  #     register: postgres_running
  #     until: postgres_running is success
  #     retries: 10
  # - name: Populate database
  #   command: ./manage.py migrate